module sixteenbitdecoder(
	CLOCK_50,)
	
	reg [09:00] clock_divider_counter
	reg speedy_clock;
	reg v;
	reg [7:0] slices_memory [0:255];

		always @(posedge CLOCK_50) begin
			if (reset == 1'b1) // reset if reset button hit
				clock_divider_counter <= 0;
			else if (clock_divider_counter == 217) // reset if too high
				clock_divider_counter <= 0;
			else
				clock_divider_counter <= clock_divider_counter + 1;
		end

		always @(posedge CLOCK_50) begin
			if (reset == 1'b1)
				speedy_clock <= 0;
			else if(clock_divider_counter == 217)
				speedy_clock <= ~speedy_clock;
		end

module selector (fetchoutput, v, speedy_clock)

	wire [15:00] fetchoutput
	
	fetchoutput [03:07] = reg v
	always @(posedge speedy_clock)
	data_out=v
	
	end
endmodule
	
	
	