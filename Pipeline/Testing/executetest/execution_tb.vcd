$date
	Tue Aug 23 15:58:15 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module registerfile_tb $end
$var wire 1 ! clock $end
$var wire 6 " rd1 [5:0] $end
$var wire 16 # rd1_out [15:0] $end
$var wire 6 $ rd2 [5:0] $end
$var wire 16 % rd2_out [15:0] $end
$var wire 6 & rd3 [5:0] $end
$var wire 16 ' rd3_out [15:0] $end
$var wire 1 ( reset $end
$var wire 2 ) wr1 [1:0] $end
$var wire 16 * wr1_data [15:0] $end
$var wire 1 + wr1_enable $end
$var wire 2 , wr2 [1:0] $end
$var wire 16 - wr2_data [15:0] $end
$var wire 1 . wr2_enable $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module sixteenbbitdecoder_test $end
$var wire 16 / fetchoutput [15:0] $end
$var wire 1 0 bit_check $end
$var reg 3 1 destination [2:0] $end
$var reg 6 2 opcode [5:0] $end
$var reg 6 3 operationnumber [5:0] $end
$var reg 3 4 source_1 [2:0] $end
$var reg 3 5 source_2 [2:0] $end
$var reg 3 6 unsigned_1 [2:0] $end
$var reg 6 7 unsigned_2 [5:0] $end
$var reg 9 8 unsigned_3 [8:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module fetch_test $end
$var wire 16 9 fetchoutput [15:0] $end
$var reg 16 : fetchvalue [15:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module execution_test $end
$var wire 1 ! clock $end
$var wire 9 ; unsigned_3 [8:0] $end
$var wire 6 < unsigned_2 [5:0] $end
$var wire 3 = unsigned_1 [2:0] $end
$var wire 3 > source_2 [2:0] $end
$var wire 3 ? source_1 [2:0] $end
$var wire 16 @ rd3_out [15:0] $end
$var wire 16 A rd2_out [15:0] $end
$var wire 16 B rd1_out [15:0] $end
$var wire 6 C operationnumber [5:0] $end
$var wire 3 D destination [2:0] $end
$var reg 6 E rd1 [5:0] $end
$var reg 6 F rd2 [5:0] $end
$var reg 6 G rd3 [5:0] $end
$var reg 2 H wr1 [1:0] $end
$var reg 16 I wr1_data [15:0] $end
$var reg 1 + wr1_enable $end
$var reg 2 J wr2 [1:0] $end
$var reg 16 K wr2_data [15:0] $end
$var reg 1 . wr2_enable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
b0 :
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
00
b0 /
x.
bx -
bx ,
x+
bx *
bx )
0(
bx '
bx &
bx %
bx $
bx #
bx "
0!
$end
#1
0.
0+
1!
#2
0!
#3
1!
#4
0!
#5
1!
1(
#6
0!
#7
1!
#8
0!
#9
1!
#10
b1 3
b1 C
b1010 8
b1010 ;
b1010 7
b1010 <
b10 6
b10 =
b10 5
b10 >
b1 4
b1 ?
b0 1
b0 D
b1 2
0!
b1000001010 /
b1000001010 9
b1000001010 :
#11
1+
b11 *
b11 I
b0 )
b0 H
1!
#12
0!
#13
1+
1!
#14
0!
#15
1+
1!
#16
0!
#17
1+
1!
#18
0!
#19
1+
1!
#20
b1000010 8
b1000010 ;
b10 7
b10 <
b0 4
b0 ?
b1 1
b1 D
0!
b1001000010 /
b1001000010 9
b1001000010 :
#21
b10 *
b10 I
b1 )
b1 H
1+
1!
#22
0!
#23
1+
1!
#24
0!
#25
1+
1!
0(
#26
0!
#27
1+
1!
#28
0!
#29
1+
1!
#30
b10 3
b10 C
b11000010 8
b11000010 ;
b11 1
b11 D
b10 2
0!
b10011000010 /
b10011000010 9
b10011000010 :
#31
b1111111111111110 *
b1111111111111110 I
b11 )
b11 H
1+
1!
#32
0!
#33
1+
1!
#34
0!
#35
1+
1!
#36
0!
#37
1+
1!
#38
0!
#39
1+
1!
#40
b11 3
b11 C
b10000001 8
b10000001 ;
b1 7
b1 <
b1 6
b1 =
b1 5
b1 >
b10 1
b10 D
b11 2
0!
b11010000001 /
b11010000001 9
b11010000001 :
#41
b0 *
b0 I
b10 )
b10 H
1+
1!
#42
0!
#43
1+
1!
#44
0!
#45
1+
1!
#46
0!
#47
1+
1!
#48
0!
#49
1+
1!
#50
b1010 3
b1010 C
b10110 8
b10110 ;
b10110 7
b10110 <
b110 6
b110 =
b110 5
b110 >
b10 4
b10 ?
b0 1
b0 D
b1010 2
0!
b1010000010110 /
b1010000010110 9
b1010000010110 :
#51
b1000 *
b1000 I
b0 )
b0 H
1+
1!
#52
0!
#53
1+
1!
#54
0!
#55
1+
1!
#56
0!
#57
1+
1!
#58
0!
#59
1+
1!
#60
b1101 3
b1101 C
b1010010 8
b1010010 ;
b10010 7
b10010 <
b10 6
b10 =
b10 5
b10 >
b1 1
b1 D
b1101 2
0!
b1101001010010 /
b1101001010010 9
b1101001010010 :
#61
b1 )
b1 H
1+
1!
#62
0!
#63
1+
1!
#64
0!
#65
1+
1!
#66
0!
#67
1+
1!
#68
0!
#69
1+
1!
#70
0!
#71
1+
1!
#72
0!
#73
1+
1!
#74
0!
#75
1+
1!
#76
0!
#77
1+
1!
#78
0!
#79
1+
1!
#80
0!
