
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
/*
`include "Execute.v"
`include "RegisterFile.v"
`include "32bitdecoder.v"
`include "DataMemory.v"
`include "InstructionMemory.v"
`include "Fetch.v"
*/
module DE0_NANO(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
//	SW,
/*
	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	gpio_0,
	gpio_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	gpio_1,
	gpio_1_IN,
*/	
	/////////// UART /////////////
	UART_TX,
	UART_GND,
	UART_RX,

	slow_clock
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

	//////////// CLOCK //////////
	input 		          		CLOCK_50;

	//////////// LED //////////
	output		     [7:0]		LED;

	//////////// KEY //////////
	input 		     [1:0]		KEY;

	//////////// SW //////////
//	input 		     [3:0]		SW;
/*
	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR;
	output		     [1:0]		DRAM_BA;
	output		          		DRAM_CAS_N;
	output		          		DRAM_CKE;
	output		          		DRAM_CLK;
	output		          		DRAM_CS_N;
	inout 		    [15:0]		DRAM_DQ;
	output		     [1:0]		DRAM_DQM;
	output		          		DRAM_RAS_N;
	output		          		DRAM_WE_N;

	//////////// EPCS //////////
	output		          		EPCS_ASDO;
	input 		          		EPCS_DATA0;
	output		          		EPCS_DCLK;
	output		          		EPCS_NCSO;

	//////////// Accelerometer and EEPROM //////////
	output		          		G_SENSOR_CS_N;
	input 		          		G_SENSOR_INT;
	output		          		I2C_SCLK;
	inout 		          		I2C_SDAT;

	//////////// ADC //////////
	output		          		ADC_CS_N;
	output		          		ADC_SADDR;
	output		          		ADC_SCLK;
	input 		          		ADC_SDAT;

	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2;
	input 		     [2:0]		GPIO_2_IN;

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		gpio_0;
	input 		     [1:0]		gpio_0_IN;

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [33:0]		gpio_1;
	input 		     [1:0]		gpio_1_IN;
*/
	/////////// UART //////////////
	output 	                  UART_TX;
   output                     UART_GND;
   input		  						UART_RX;
	
	output 							slow_clock;

//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire myreset;

	wire [05:00] reg_rd1;
	wire [05:00] reg_rd2;
	wire [05:00] reg_rd3;

	wire [07:00] data_rd1;
	wire [07:00] data_rd2;
	wire [07:00] data_rd3;
	wire [07:00] data_rd4;


	wire [15:00] reg_rd1_out;
	wire [15:00] reg_rd2_out;
	wire [15:00] reg_rd3_out;

	wire [07:00] data_rd1_out;
	wire [07:00] data_rd2_out;
	wire [07:00] data_rd3_out;
	wire [07:00] data_rd4_out;		

	wire [05:00] destination;

	wire [05:00] reg_wr1;
	wire [15:00] reg_wr1_data;
	wire 		 reg_wr1_enable;

	wire [05:00] instruction_wr1;
	wire [15:00] instruction_wr1_data;
	wire instruction_wr1_enable;
	
	wire [05:00] instruction_wr2;
	wire [15:00] instruction_wr2_data;
	wire instruction_wr2_enable;
	
	wire [05:00] reg_wr2;
	wire [15:00] reg_wr2_data;
	wire 		 reg_wr2_enable;

	wire [05:00] reg_wr3;
	wire [15:00] reg_wr3_data;
	wire 		 reg_wr3_enable;

	wire [07:00] data_wr1;
	wire [07:00] data_wr1_data;
	wire		 data_wr1_enable;

	wire [07:00] data_wr2;
	wire [07:00] data_wr2_data;
	wire		 data_wr2_enable;

	wire [07:00] data_wr3;
	wire [07:00] data_wr3_data;
	wire		 data_wr3_enable;

	wire [07:00] data_wr4;
	wire [07:00] data_wr4_data;
	wire		 data_wr4_enable;

	reg [15:00] register [63:00]; 

	wire [31:00]  fetchoutput;
   wire [05:00]  operationnumber;
   reg		      opcodemem;

   wire [05:00] source_1;
   wire [05:00] source_2;

   wire [21:00] signed_1;
   wire [15:00] signed_2;
   wire [09:00] signed_3;

   wire [05:00] unsigned_1;
   wire [15:00] unsigned_2;
   wire [08:00] unsigned_3;
   wire [09:00] unsigned_4;
   wire [08:00] unsigned_5;

   wire [05:00] instruction_rd1;
   wire [05:00] instruction_rd2;
	wire [05:00] instruction_rd3;
	wire [05:00] instruction_rd4;
	wire [15:00] instruction_rd1_out;
	wire [15:00] instruction_rd2_out;
	wire [15:00] instruction_rd3_out;
	wire [15:00] instruction_rd4_out;

	wire [08:00]pcchange;
	wire [05:00]pclocation;

    wire [02:00]pcjumpenable; 

    reg [15:00] fetch1;
    reg [15:00] fetch2;

	wire uart_reset;
	wire uart_stop;
	wire uart_continue;
	wire uart_step_enable;
	wire [05:00] uart_step_volume;
	 
	wire [05:00] previous_programcounter;
	wire [05:00] programcounter;
	
//	wire		UART_TX;
	wire		UART_GND;
	wire 		UART_RX;


//=======================================================
//  Structural coding
//=======================================================


//=====================================
//	Slow Clock
//=====================================
// Slow clock down
	reg 		 		slow_clock_divider_counter;
   reg 				slow_clock;
	
	// Clock counter
	always @(posedge CLOCK_50) begin
     if (slow_clock_divider_counter == 1) begin
			slow_clock = ~slow_clock;
			slow_clock_divider_counter = 0;
		end
		else
			slow_clock_divider_counter = slow_clock_divider_counter + 1; 	// Otherwise increment the counter
	end		 

//=====================================


//=======================================================
//		Thunderclap Newman
//=======================================================
	// Instantiate the instruction memory
	TheInstructionMemory i_TheInstructionMemory 	(	.clock           (slow_clock),
																	.reset           (myreset),
																	.instruction_rd1 (instruction_rd1),
																	.instruction_wr1 (instruction_wr1),
																	.instruction_wr1_data (instruction_wr1_data),
																	.instruction_wr1_enable (instruction_wr1_enable),
																	.instruction_rd1_out (instruction_rd1_out),
																	.instruction_rd2 (instruction_rd2),
																	.instruction_wr2 (instruction_wr2),
																	.instruction_wr2_data (instruction_wr2_data),
																	.instruction_wr2_enable (instruction_wr2_enable),
																	.instruction_rd2_out (instruction_rd2_out)
																
																);
															
	// Instantiate the RegisterFile
	registerfile 			i_registerfile				(	.clock (slow_clock),
																	.reset (myreset),
																	.reg_rd1 (reg_rd1),
																	.reg_rd2 (reg_rd2),
																	.reg_rd3 (reg_rd3),
																	.reg_rd1_out (reg_rd1_out),
																	.reg_rd2_out (reg_rd2_out),
																	.reg_rd3_out (reg_rd3_out),
																	.reg_wr1 (reg_wr1),
																	.reg_wr2 (reg_wr2),
																	.reg_wr3 (reg_wr3),
																	.reg_wr1_data (reg_wr1_data),
																	.reg_wr2_data (reg_wr2_data),
																	.reg_wr3_data (reg_wr3_data),
																	.reg_wr1_enable (reg_wr1_enable),
																	.reg_wr2_enable (reg_wr2_enable),
																	.reg_wr3_enable (reg_wr3_enable),
																	.carrybit (carrybit),
																	.carrybit_wr (carrybit_wr),
																	.carrybit_wr_enable (carrybit_wr_enable)
																);
	//Instantiate the DataMemory
	TheDataMemory			i_TheDataMemory			(	.clock (slow_clock),
																	.reset (myreset),
																	.data_rd1 (data_rd1),
																	.data_rd2 (data_rd2),
																	.data_rd3 (data_rd3),
																	.data_rd4 (data_rd4),
																	.data_rd1_out (data_rd1_out),
																	.data_rd2_out (data_rd2_out),
																	.data_rd3_out (data_rd3_out),
																	.data_rd4_out (data_rd4_out),
																	.data_wr1 (data_wr1),
																	.data_wr2 (data_wr2),
																	.data_wr3 (data_wr3),
																	.data_wr4 (data_wr4),
																	.data_wr1_data (data_wr1_data),
																	.data_wr2_data (data_wr2_data),
																	.data_wr3_data (data_wr3_data),
																	.data_wr4_data (data_wr4_data),
																	.data_wr1_enable (data_wr1_enable),
																	.data_wr2_enable (data_wr2_enable),
																	.data_wr3_enable (data_wr3_enable),
																	.data_wr4_enable (data_wr4_enable)
																);
	// Instantiate the fetch unit
	fetch 					i_fetch 						(	.clock (slow_clock),
																	.reset (myreset),
																	.nop_stop (nop_stop),
																	.instruction_rd1 (instruction_rd1),
																	.instruction_rd1_out (instruction_rd1_out),
																	.fetchoutput (fetchoutput),
																	.pcchange (pcchange),
																	.pclocation (pclocation),
																	.pcjumpenable (pcjumpenable),
																	.previous_programcounter (previous_programcounter),
																	.programcounter (programcounter),
																	.flush (flush),
																	.LED (LED),
																	.uart_stop (uart_stop),
																	.uart_continue (uart_continue),
																	.uart_step_enable (uart_step_enable),
																	.uart_step_volume (uart_step_volume),
																	.uart_reset (uart_reset)
																);
	// Instantiate the decoder
	decoder					i_decoder					( 	.fetchoutput (fetchoutput),
																	.destination (destination),
																	.operationnumber (operationnumber),
																	.source_1 (source_1),
																	.source_2 (source_2),
																	.unsigned_1 (unsigned_1),
																	.unsigned_2 (unsigned_2),
																	.unsigned_3 (unsigned_3),
																	.unsigned_4 (unsigned_4),
																	.signed_1 (signed_1),
																	.signed_2 (signed_2),
																	.signed_3 (signed_3),
																	.flush (flush),
																	.super_duper_a (super_duper_a),
																	.super_duper_b (super_duper_b)
																);
	// Instantiate the execute
	execution				i_execuition				(	.clock (slow_clock),
																	.reset (myreset),
																	.nop_stop (nop_stop),
																	.destination (destination),
																	.operationnumber (operationnumber),
																	.source_1 (source_1),
																	.source_2 (source_2),
																	.unsigned_1 (unsigned_1),
																	.unsigned_2 (unsigned_2),
																	.unsigned_3 (unsigned_3),
																	.unsigned_4 (unsigned_4),
																	.signed_1 (signed_1),
																	.signed_2 (signed_2),
																	.signed_3 (signed_3),
																	.super_duper_a (super_duper_a),
																	.super_duper_b (super_duper_b),
																	.data_rd1 (data_rd1),
																	.data_rd2 (data_rd2),
																	.data_rd4 (data_rd4),
																	.data_rd1_out (data_rd1_out),
																	.data_rd2_out (data_rd2_out),
																	.data_rd4_out (data_rd4_out),
																	.data_wr1 (data_wr1),
																	.data_wr2 (data_wr2),
																	.data_wr4 (data_wr4),
																	.data_wr1_data (data_wr1_data),
																	.data_wr2_data (data_wr2_data),
																	.data_wr4_data (data_wr4_data),
																	.data_wr1_enable (data_wr1_enable),
																	.data_wr2_enable (data_wr2_enable),
																	.data_wr4_enable (data_wr4_enable),
																	.reg_rd1 (reg_rd1),
																	.reg_rd2 (reg_rd2),
																	//.reg_rd3 (reg_rd3),
																	.reg_rd1_out (reg_rd1_out),
																	.reg_rd2_out (reg_rd2_out),
																	//.reg_rd3_out (reg_rd3_out),
																	.reg_wr1 (reg_wr1),
																	.reg_wr2 (reg_wr2),
																	.reg_wr1_data (reg_wr1_data),
																	.reg_wr2_data (reg_wr2_data),
																	.reg_wr1_enable (reg_wr1_enable),
																	.reg_wr2_enable (reg_wr2_enable),
																	.previous_programcounter (previous_programcounter),
															//		.LED (LED),
																	.carrybit (carrybit),
																	.carrybit_wr (carrybit_wr),
																	.carrybit_wr_enable (carrybit_wr_enable)
																);
																
	//Instantiate the uart
	uart						i_uart						(	.clock (slow_clock),
																	.superclock (CLOCK_50),
																	.reset (myreset),
																	.UART_TX (UART_TX),
																	.UART_GND (UART_GND),
																	.UART_RX	(UART_RX),
																	.reg_rd3 (reg_rd3),
																	.reg_rd3_out (reg_rd3_out),
																	//.LED (LED),
																	.reg_wr3 (reg_wr3),
																	.reg_wr3_data (reg_wr3_data),
																	.reg_wr3_enable (reg_wr3_enable),
																	.instruction_rd2 (instruction_rd2),
																	.instruction_rd2_out (instruction_rd2_out),
																	.instruction_wr2 (instruction_wr2),
																	.instruction_wr2_data (instruction_wr2_data),
																	.instruction_wr2_enable (instruction_wr2_enable),
																	.data_rd3 (data_rd3),
																	.data_rd3_out (data_rd3_out),
																	.data_wr3 (data_wr3),
																	.data_wr3_data (data_wr3_data),
																	.data_wr3_enable (data_wr3_enable),																	
																	.previous_programcounter (previous_programcounter),
																	.programcounter (programcounter),
																	.uart_stop (uart_stop),
																	.uart_continue (uart_continue),
																	.uart_step_enable (uart_step_enable),
																	.uart_step_volume (uart_step_volume),
																	.uart_reset (uart_reset)

																);
																
																
																	
																							 
endmodule



