module uart (	clock,
					reset,
					UART_TX,
					UART_GND,
					UART_RX
				);
				
	input				clock;
	input 			reset;
	
	output 			UART_GND;
	output 			UART_TX;
		
	input				UART_RX;
	
	//UART transmit at 300 baud from 50MHz clock
	reg [16:0] 		clock_divider_counter;
   reg 				uart_clock;
	
	// Clock counter
	always @(posedge clock) begin
     if (reset == 1'b1)
			clock_divider_counter = 0;
		else if (clock_divider_counter == 83333)
			clock_divider_counter = 0;
		else
			clock_divider_counter = clock_divider_counter + 1; 	// Otherwise increment the counter
	end		
	
	// Generate a clock (toggle this register)
   always @(posedge clock) begin
		if (reset == 1'b1)
			uart_clock <= 0;
		else if (clock_divider_counter == 83333)
			uart_clock = ~uart_clock;
	end	


	// UART_TX state machine
	   always @(posedge uart_clock or posedge reset) begin
			if (reset) begin
			// Reset to the "IDLE" state
				transmit_state <= 0;
	     // The UART line is set to '1' when idle, or reset
				UART_TX = 1;
	     // Data we'll transmit - start at ASCII '0'
				transmit_data = recievedstorage[amountrecieved];
			end
			
			else begin
				case (transmit_state)
					0;
						begin
							if (write_enable == 1)
								transmit_state = 1;
								
							transmit_data  = recieved;	
						end
					1:
						begin
							UART_TX = 0;
							transmit_state = 2;
						end
					2,3,4,5,6,7,8,9:
						begin
							UART_TX = transmit_data[transmit_state - 2];
							transmit_state = transmit_state + 1;
						end
					10:
						begin
							transmit_state = 0;
							UART_TX = 1;
						end
						
					default:
						begin
							transmit_state = 0
						end
				endcase
			end
			
		end
				
				